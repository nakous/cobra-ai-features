<?php

namespace CobraAI\Features\StripeSubscriptions;

class StripeSubscriptionAdmin
{
    private $feature;
    private $menu_slug = 'cobra-stripe-subscriptions';
    private $capability = 'manage_options';

    private $total_items = 0;

    public function __construct(Feature $feature)
    {
        $this->feature = $feature;
        $this->init_hooks();
    }
    private static $instance = null;
    public static function get_instance(Feature $feature): self
    {
        if (null === self::$instance) {
            self::$instance = new self($feature);
        }
        return self::$instance;
    }
    /**
     * Initialize admin hooks
     */
    private function init_hooks(): void
    {
        // Menu and pages
        add_action('admin_menu', [$this, 'add_menu_items']);
        add_action('admin_enqueue_scripts', [$this, 'enqueue_assets']);
        // AJAX handlers
        add_action('wp_ajax_cobra_subscription_create_plan', [$this, 'handle_create_plan']);
        add_action('wp_ajax_cobra_subscription_update_plan', [$this, 'handle_update_plan']);
        add_action('wp_ajax_cobra_subscription_delete_plan', [$this, 'handle_delete_plan']);
        add_action('wp_ajax_cobra_subscription_sync_plans', [$this, 'handle_sync_plans']);
        // wp_ajax_cobra_subscription_get_plan
        add_action('wp_ajax_cobra_subscription_get_plan', [$this, 'handle_get_plan']);
        add_action('wp_ajax_cobra_subscription_cancel', [$this, 'handle_cancel_subscription']);
        add_action('wp_ajax_cobra_subscription_refund', [$this, 'handle_refund_payment']);

        // Post type modifications
        add_action('init', [$this, 'stripe_plan_custom_post_type'], 0);
        add_action('add_meta_boxes_stripe_plan', [$this, 'add_plan_meta_boxes']);
        add_action('save_post_stripe_plan', [$this, 'save_plan_meta']);

        // Custom columns
        add_filter('manage_stripe_plan_posts_columns', [$this, 'add_plan_columns']);
        add_action('manage_stripe_plan_posts_custom_column', [$this, 'render_plan_column'], 10, 2);
    }
    public function enqueue_assets($hook): void
    {
        if (strpos($hook, $this->menu_slug) === false) {
            return;
        }

        wp_enqueue_style(
            'cobra-stripe-admin',
            $this->feature->get_url() . 'assets/css/admin.css',
            [],
            $this->feature->getVesrion()
        );

        wp_enqueue_script(
            'cobra-stripe-admin',
            $this->feature->get_url() . 'assets/js/admin.js',
            ['jquery'],
            $this->feature->getVesrion(),
            true
        );
    }
    /**
     * Add admin menu items
     */
    public function add_menu_items(): void
    {
        add_menu_page(
            __('Dashboard Subscriptions', 'cobra-ai'),
            __('Subscriptions', 'cobra-ai'),
            $this->capability,
            $this->menu_slug,
            [$this, 'render_dashboard'],
            'dashicons-money'
        );

        add_submenu_page(
            $this->menu_slug,
            __('Plans Subscriptions', 'cobra-ai'),
            __('Plans', 'cobra-ai'),
            $this->capability,
            $this->menu_slug . '&view=plans',
            [$this, 'render_dashboard']
        );
    }

    /**
     * Add screen options
     */
    // public function add_screen_options(): void
    // {
    //     $option = 'per_page';
    //     $args = [
    //         'label' => __('Subscriptions per page', 'cobra-ai'),
    //         'default' => 20,
    //         'option' => 'subscriptions_per_page'
    //     ];
    //     add_screen_option($option, $args);
    // }
    private function render_plans_page(): void
    {
        include $this->feature->get_path() . 'views/admin/plans.php';
    }
    /**
     * Render admin dashboard
     */
    public function render_dashboard(): void
    {
        // Get current view
        $view = $_GET['view'] ?? 'dashboard';

        switch ($view) {
            case 'subscription':
                $this->render_subscription_details();
                break;
            case 'customer':
                $this->render_customer_details();
                break;
            case 'payment':
                $this->render_payment_details();
                break;
            case 'subscription-list':

                break;
            case 'plans':
                $this->render_plans_page();
                break;
            default:
                $this->render_subscriptions_list();
                break;
        }
    }
    public function get_plans(): array
    {
        global $wpdb;
        $table = $this->feature->get_table('stripe_plans');

        $where = [];
        $params = [];

        // Apply status filter
        if (!empty($_GET['status'])) {
            $where[] = "status = %s";
            $params[] = sanitize_text_field($_GET['status']);
        }

        // Apply search filter
        if (!empty($_GET['s'])) {
            $where[] = "(name LIKE %s OR description LIKE %s)";
            $search = '%' . $wpdb->esc_like(sanitize_text_field($_GET['s'])) . '%';
            $params[] = $search;
            $params[] = $search;
        }

        $where_clause = !empty($where) ? 'WHERE ' . implode(' AND ', $where) : '';

        $query = "SELECT * FROM {$table['name']} $where_clause ORDER BY created_at DESC";
        if (empty($where_clause)) {
            return $wpdb->get_results($query);
        } else {
            return $wpdb->get_results($wpdb->prepare($query, ...$params));
        }
    }


    /**
     * render customer details
     */
    private function render_customer_details(): void
    {
        $customer_id = sanitize_text_field($_GET['id'] ?? '');
        if (empty($customer_id)) {
            wp_die(__('No customer specified', 'cobra-ai'));
        }

        // Get customer details
        $customer = $this->get_customer($customer_id);
        if (!$customer) {
            wp_die(__('Customer not found', 'cobra-ai'));
        }

        // Get related data
        $subscriptions = $this->get_customer_subscriptions($customer_id);
        $payments = $this->get_customer_payments($customer_id);

        // Include view
        include $this->feature->get_path() . 'views/admin/customer-details.php';
    }

    /**
     * render payment details
     */
    private function render_payment_details(): void
    {
        $payment_id = sanitize_text_field($_GET['id'] ?? '');
        if (empty($payment_id)) {
            wp_die(__('No payment specified', 'cobra-ai'));
        }

        // Get payment details
        $payment = $this->get_payment($payment_id);
        if (!$payment) {
            wp_die(__('Payment not found', 'cobra-ai'));
        }

        // Get related data
        $customer = $this->get_customer($payment->customer_id);
        $subscription = $this->get_subscription($payment->subscription_id);

        // Include view
        include $this->feature->get_path() . 'views/admin/payment-details.php';
    }
    /**
     * Render subscriptions list
     */
    private function render_subscriptions_list(): void
    {
        // Get pagination parameters
        $per_page = $this->get_items_per_page('subscriptions_per_page', 20);
        $current_page = $this->get_pagenum();

        // Get subscriptions
        $subscriptions = $this->get_subscriptions([
            'per_page' => $per_page,
            'page' => $current_page
        ]);

        // Include view
        include $this->feature->get_path() . 'views/admin/subscriptions.php';
    }

    /**
     * Render subscription details
     */
    private function render_subscription_details(): void
    {
        $subscription_id = sanitize_text_field($_GET['id'] ?? '');
        if (empty($subscription_id)) {
            wp_die(__('No subscription specified', 'cobra-ai'));
        }

        // Get subscription details
        $subscription = $this->get_subscription($subscription_id);
        if (!$subscription) {
            wp_die(__('Subscription not found', 'cobra-ai'));
        }

        // Get related data
        $customer = $this->get_customer($subscription->customer_id);
        $payments = $this->get_subscription_payments($subscription_id);

        // Include view
        include $this->feature->get_path() . 'views/admin/subscription-details.php';
    }

    /* *
     * Get subscriptions
 
    private function get_subscriptions(array $args = []): array
    {
        global $wpdb;

        $defaults = [
            'per_page' => 20,
            'page' => 1,
            'orderby' => 'created_at',
            'order' => 'DESC'
        ];

        $args = wp_parse_args($args, $defaults);
        $offset = ($args['page'] - 1) * $args['per_page'];

        $table = $this->feature->get_table('stripe_subscriptions');
        // print_r($table);
        return $wpdb->get_results($wpdb->prepare(
            "SELECT * FROM {$table['name']} 
             ORDER BY {$args['orderby']} {$args['order']}
             LIMIT %d OFFSET %d",
            $args['per_page'],
            $offset
        ));
    }
    */
    /**
     * Get single subscription
     */
    public function get_subscription(string $subscription_id)
    {
        global $wpdb;

        $table = $this->feature->get_table('stripe_subscriptions');

        return $wpdb->get_row($wpdb->prepare(
            "SELECT * FROM {$table['name']} WHERE subscription_id = %s",
            $subscription_id
        ));
    }

   
    /**
     * Register subscription plan post type
     */
    public function stripe_plan_custom_post_type(): void
    {
        register_post_type('stripe_plan', [
            'labels' => [
                'name'                  => __('Subscription Plans', 'cobra-ai'),
                'singular_name'         => __('Subscription Plan', 'cobra-ai'),
                'menu_name'            => __('Plans', 'cobra-ai'),
                'name_admin_bar'       => __('Subscription Plan', 'cobra-ai'),
                'add_new'              => __('Add New', 'cobra-ai'),
                'add_new_item'         => __('Add New Plan', 'cobra-ai'),
                'new_item'             => __('New Plan', 'cobra-ai'),
                'edit_item'            => __('Edit Plan', 'cobra-ai'),
                'view_item'            => __('View Plan', 'cobra-ai'),
                'all_items'            => __('All Plans', 'cobra-ai'),
                'search_items'         => __('Search Plans', 'cobra-ai'),
                'not_found'            => __('No plans found.', 'cobra-ai'),
                'not_found_in_trash'   => __('No plans found in Trash.', 'cobra-ai')
            ],
            'public' => true,
            'has_archive'         => 'plans',
            'supports' => ['title', 'editor', 'thumbnail'],
            'rewrite' => array('slug' => 'plans'),
            'publicly_queryable' => true,
            'show_ui'            => true,
            'show_in_menu'       => true,
            'query_var'          => true,
            'capability_type'    => 'post',
            'hierarchical'       => false,
            'menu_position'      => null,


        ]);
    }
    /**
     * Add plan meta boxes
     */
    public function add_plan_meta_boxes(): void
    {
        add_meta_box(
            'stripe_plan_details',
            __('Plan Details', 'cobra-ai'),
            [$this, 'render_plan_meta_box'],
            'stripe_plan',
            'normal',
            'high'
        );
    }

    /**
     * Render plan meta box
     */
    public function render_plan_meta_box(\WP_Post $post): void
    {
        // Get current values
        $plan_data = get_post_meta($post->ID, '_stripe_plan_data', true) ?: [];

        // Include view
        include $this->feature->get_path() . 'views/admin/plan-meta-box.php';
    }

    /**
     * Save plan meta
     */
    public function save_plan_meta(int $post_id): void
    {
        if (!$this->verify_save_permissions($post_id)) {
            return;
        }
        if (!isset($_POST['stripe_plan'])) {
            return;
        }
        $data = $_POST['stripe_plan'];
        $data['name'] = get_the_title($post_id);
        if (isset($data['billing_interval'])) $data['interval'] = $data['billing_interval'];
        $plan_data = $this->validate_plan_data($data);
        $existing_stripe_data = get_post_meta($post_id, '_stripe_plan_data', true);

        try {
            $stripe_data = [];

            // Check if plan exists in Stripe
            if (!empty($existing_stripe_data['stripe_product_id'])) {
                // Update existing product
                $product = \Stripe\Product::update($existing_stripe_data['stripe_product_id'], [
                    'name' => get_the_title($post_id),
                    'description' => get_the_content($post_id)
                ]);

                // Create new price if price details changed
                if ($this->price_details_changed($existing_stripe_data, $plan_data)) {
                    $price = \Stripe\Price::create([
                        'product' => $product->id,
                        'unit_amount' => $plan_data['price'] * 100,
                        'currency' => $plan_data['currency'],
                        'recurring' => [
                            'interval' => $plan_data['billing_interval'],
                            'interval_count' => $plan_data['interval_count']
                        ]
                    ]);

                    // Archive old price
                    if (!empty($existing_stripe_data['stripe_price_id'])) {
                        \Stripe\Price::update($existing_stripe_data['stripe_price_id'], [
                            'active' => false
                        ]);
                    }

                    $stripe_data = [
                        'product' => $product,
                        'price' => $price
                    ];
                }
            } else {
                // Create new product and price
                $stripe_data = $this->feature->get_api()->create_price([
                    'name' => get_the_title($post_id),
                    'description' => get_the_content($post_id),
                    'amount' => $plan_data['price'],
                    'currency' => $plan_data['currency'],
                    'interval' => $plan_data['billing_interval'],
                    'interval_count' => $plan_data['interval_count']
                ]);
            }

            // Update Stripe IDs
            if (!empty($stripe_data)) {
                $plan_data['stripe_price_id'] = $stripe_data['price']->id;
                $plan_data['stripe_product_id'] = $stripe_data['product']->id;
            }

            // Handle featured image
            if (has_post_thumbnail($post_id)) {
                $image_url = wp_get_attachment_url(get_post_thumbnail_id($post_id));
                \Stripe\Product::update($plan_data['stripe_product_id'], [
                    'images' => [$image_url]
                ]);
            }

            update_post_meta($post_id, '_stripe_plan_data', $plan_data);
        } catch (\Exception $e) {
            $this->feature->log('error', 'Failed to sync plan with Stripe', [
                'error' => $e->getMessage(),
                'plan_id' => $post_id
            ]);
        }
    }

    private function price_details_changed($old_data, $new_data): bool
    {
        return $old_data['price'] != $new_data['price'] ||
            $old_data['currency'] != $new_data['currency'] ||
            $old_data['billing_interval'] != $new_data['billing_interval'] ||
            $old_data['interval_count'] != $new_data['interval_count'];
    }

    public function template_loader($template): string
    {
        global $post, $wp_query;

        // Add extensive debugging
        if (isset($wp_query->query_vars['post_type']) && $wp_query->query_vars['post_type'] === 'stripe_plan') {
            // Force correct post type
            $post->post_type = 'stripe_plan';

            if (is_single()) {
                $custom_template = $this->feature->get_path() . 'views/public/single-plan.php';
                if (file_exists($custom_template)) {
                    return $custom_template;
                }
            }
        }
        return $template;
    }
    /**
     * Add custom columns to plans list
     */
    public function add_plan_columns($columns): array
    {
        $new_columns = [];

        foreach ($columns as $key => $value) {
            if ($key === 'title') {
                $new_columns[$key] = $value;
                $new_columns['price'] = __('Price', 'cobra-ai');
                $new_columns['interval'] = __('Billing Interval', 'cobra-ai');
                $new_columns['subscribers'] = __('Active Subscribers', 'cobra-ai');
            } else {
                $new_columns[$key] = $value;
            }
        }

        return $new_columns;
    }

    /**
     * Render custom column content
     */
    public function render_plan_column(string $column, int $post_id): void
    {
        $plan_data = get_post_meta($post_id, '_stripe_plan_data', true) ?: [];

        switch ($column) {
            case 'price':
                if (!empty($plan_data['price'])) {
                    echo esc_html(
                        $plan_data['currency'] . ' ' .
                            number_format($plan_data['price'], 2)
                    );
                }
                break;

            case 'interval':
                if (!empty($plan_data['interval'])) {
                    printf(
                        __('Every %d %s', 'cobra-ai'),
                        $plan_data['interval_count'],
                        $plan_data['interval']
                    );
                }
                break;

            case 'subscribers':
                echo esc_html($this->get_plan_subscriber_count($post_id));
                break;
        }
    }

    /**
     * Get subscriber count for a plan
     */
    private function get_plan_subscriber_count(int $post_id): int
    {
        global $wpdb;

        $table = $this->feature->get_table('stripe_subscriptions');

        return (int) $wpdb->get_var($wpdb->prepare(
            "SELECT COUNT(*) FROM {$table['name']}
             WHERE plan_id = %d AND status = 'active'",
            $post_id
        ));
    }

    /**
     * Handle AJAX plan creation
     */
    public function handle_create_plan(): void
    {
        try {
            check_ajax_referer('cobra_plan_nonce');

            if (!current_user_can($this->capability)) {
                throw new \Exception(__('Permission denied', 'cobra-ai'));
            }

            $plan_data = $this->validate_plan_data($_POST);

            // Create plan post
            $post_id = wp_insert_post([
                'post_title' => $plan_data['name'],
                'post_content' => $plan_data['description'],
                'post_type' => 'stripe_plan',
                'post_status' => 'publish'
            ]);

            if (is_wp_error($post_id)) {
                throw new \Exception($post_id->get_error_message());
            }

            // Save plan meta
            update_post_meta($post_id, '_stripe_plan_data', $plan_data);

            // Create Stripe price
            $result = $this->feature->get_api()->create_price(array_merge(
                $plan_data,
                ['plan_id' => $post_id]
            ));

            wp_send_json_success([
                'plan_id' => $post_id,
                'stripe_data' => $result
            ]);
        } catch (\Exception $e) {
            wp_send_json_error([
                'error' => $e->getMessage()
            ]);
        }
    }

    /**
     * Validate plan data
     */
    private function validate_plan_data(array $data): array
    {
        $required = ['name', 'price', 'currency', 'interval'];

        foreach ($required as $field) {
            if (empty($data[$field])) {
                throw new \Exception(
                    sprintf(__('Missing required field: %s', 'cobra-ai'), $field)
                );
            }
        }

        return [
            'name' => sanitize_text_field($data['name']),
            'description' => sanitize_textarea_field($data['description'] ?? ''),
            'price' => (float) $data['price'],
            'currency' => sanitize_text_field($data['currency']),
            'interval' => sanitize_text_field($data['interval']),
            'interval_count' => absint($data['interval_count'] ?? 1),
            'trial_days' => absint($data['trial_days'] ?? 0)
        ];
    }

    /**
     * Handle subscription cancellation
     */
    public function handle_cancel_subscription(): void
    {
        try {
            check_ajax_referer('cobra_subscription_admin');

            if (!current_user_can($this->capability)) {
                throw new \Exception(__('Permission denied', 'cobra-ai'));
            }

            $subscription_id = sanitize_text_field($_POST['subscription_id']);
            $immediately = !empty($_POST['immediately']);

            $result = $this->feature->get_api()->cancel_subscription(
                $subscription_id,
                $immediately
            );

            wp_send_json_success($result);
        } catch (\Exception $e) {
            wp_send_json_error([
                'error' => $e->getMessage()
            ]);
        }
    }

    /**
     * Handle payment refund
     */
    public function handle_refund_payment(): void
    {
        try {
            check_ajax_referer('cobra_subscription_admin');

            if (!current_user_can($this->capability)) {
                throw new \Exception(__('Permission denied', 'cobra-ai'));
            }

            $payment_id = sanitize_text_field($_POST['payment_id']);
            $amount = filter_input(
                INPUT_POST,
                'amount',
                FILTER_SANITIZE_NUMBER_FLOAT,
                FILTER_FLAG_ALLOW_FRACTION
            );

            $result = $this->feature->get_payments()->process_refund(
                $payment_id,
                $amount
            );
            wp_send_json_success($result);
        } catch (\Exception $e) {
            wp_send_json_error([
                'error' => $e->getMessage()
            ]);
        }
    }
    /**
     * handle get plan by id
     */
    public function handle_get_plan(): void
    {
        try {
            check_ajax_referer('cobra_get_plan');

            if (!current_user_can($this->capability)) {
                throw new \Exception(__('Permission denied', 'cobra-ai'));
            }

            $plan_id = sanitize_text_field($_POST['plan_id']);
            $plan =    $this->feature->get_plan($plan_id);
     

            wp_send_json_success(
                  $plan ?? []
            );
        } catch (\Exception $e) {
            wp_send_json_error([
                'error' => $e->getMessage()
            ]);
        }
    }

    /**
     * Handle plan sync
     */
    public function handle_sync_plans(): void
    {
        try {
        check_ajax_referer('cobra_sync_plans');

        if (!current_user_can($this->capability)) {
            throw new \Exception(__('Permission denied', 'cobra-ai'));
        }

        $synced = $this->feature->get_plans()->sync_with_stripe();

        wp_send_json_success([
            'message' => sprintf(
                __('Successfully synced %d plans', 'cobra-ai'),
                count($synced)
            ),
            'plans' => $synced
        ]);
        } catch (\Exception $e) {
            wp_send_json_error([
                'error' => $e->getMessage()
            ]);
        }
    }
   

    /**
     * Get items per page
     */
    // private function get_items_per_page(string $option, int $default = 20): int
    // {
    //     $per_page = (int) get_user_option($option);
    //     return $per_page ?: $default;
    // }

    /**
     * Verify save permissions
     */
    private function verify_save_permissions(int $post_id): bool
    {
        // Check if our nonce is set
        if (!isset($_POST['stripe_plan_nonce'])) {
            return false;
        }

        // Verify nonce
        if (!wp_verify_nonce($_POST['stripe_plan_nonce'], 'stripe_plan_save')) {
            return false;
        }

        // If this is an autosave, don't do anything
        if (defined('DOING_AUTOSAVE') && DOING_AUTOSAVE) {
            return false;
        }

        // Check user permissions
        if (!current_user_can('edit_post', $post_id)) {
            return false;
        }

        return true;
    }

    /**
     * Get customer details
     */
    private function get_customer(string $customer_id)
    {
        try {
            return \Stripe\Customer::retrieve([
                'id' => $customer_id,
                'expand' => ['default_source']
            ]);
        } catch (\Exception $e) {
            $this->feature->log('error', 'Failed to fetch customer', [
                'customer_id' => $customer_id,
                'error' => $e->getMessage()
            ]);
            return null;
        }
    }

    /**
     * Get subscription analytics
     */
    public function get_subscription_analytics(): array
    {
        global $wpdb;

        $subscriptions_table = $this->feature->get_table('stripe_subscriptions');
        $payments_table = $this->feature->get_table('stripe_payments');

        return [
            'total_subscriptions' => $wpdb->get_var(
                "SELECT COUNT(*) FROM {$subscriptions_table}"
            ),
            'active_subscriptions' => $wpdb->get_var(
                "SELECT COUNT(*) FROM {$subscriptions_table} WHERE status = 'active'"
            ),
            'total_revenue' => $wpdb->get_var(
                "SELECT SUM(amount) FROM {$payments_table} WHERE status = 'succeeded'"
            ),
            'recent_subscriptions' => $wpdb->get_results(
                $wpdb->prepare(
                    "SELECT * FROM {$subscriptions_table} 
                     ORDER BY created_at DESC LIMIT %d",
                    5
                )
            ),
            'subscription_status' => $wpdb->get_results(
                "SELECT status, COUNT(*) as count 
                 FROM {$subscriptions_table} 
                 GROUP BY status"
            ),
            'monthly_revenue' => $this->get_monthly_revenue()
        ];
    }

    /**
     * Get monthly revenue data
     */
    private function get_monthly_revenue(): array
    {
        global $wpdb;

        $payments_table = $this->feature->get_table('stripe_payments');

        return $wpdb->get_results(
            "SELECT 
                DATE_FORMAT(created_at, '%Y-%m') as month,
                SUM(amount) as revenue,
                COUNT(*) as count
             FROM {$payments_table}
             WHERE status = 'succeeded'
             GROUP BY DATE_FORMAT(created_at, '%Y-%m')
             ORDER BY month DESC
             LIMIT 12"
        );
    }

    /**
     * Render analytics dashboard
     */
    private function render_analytics_dashboard(): void
    {
        $analytics = $this->get_subscription_analytics();
        include $this->feature->get_path() . 'views/admin/analytics.php';
    }

    /**
     * Get dispute details
     */
    public function get_dispute_details(string $dispute_id)
    {
        global $wpdb;

        $disputes_table = $this->feature->get_table('stripe_disputes');

        return $wpdb->get_row($wpdb->prepare(
            "SELECT * FROM {$disputes_table} WHERE dispute_id = %s",
            $dispute_id
        ));
    }

    /**
     * Get subscription disputes
     */
    public function get_subscription_disputes(string $subscription_id): array
    {
        global $wpdb;

        $disputes_table = $this->feature->get_table('stripe_disputes');
        $payments_table = $this->feature->get_table('stripe_payments');

        return $wpdb->get_results($wpdb->prepare(
            "SELECT d.* FROM {$disputes_table} d
             JOIN {$payments_table} p ON d.payment_id = p.id
             WHERE p.subscription_id = %s
             ORDER BY d.created_at DESC",
            $subscription_id
        ));
    }

    /**
     * Handle dispute response
     */
    public function handle_dispute_response(): void
    {
        try {
            check_ajax_referer('cobra_subscription_admin');

            if (!current_user_can($this->capability)) {
                throw new \Exception(__('Permission denied', 'cobra-ai'));
            }

            $dispute_id = sanitize_text_field($_POST['dispute_id']);
            $evidence = $this->sanitize_dispute_evidence($_POST['evidence'] ?? []);

            $result = $this->feature->get_payments()->submit_dispute_evidence(
                $dispute_id,
                $evidence
            );

            wp_send_json_success($result);
        } catch (\Exception $e) {
            wp_send_json_error([
                'error' => $e->getMessage()
            ]);
        }
    }

    /**
     * Sanitize dispute evidence
     */
    private function sanitize_dispute_evidence(array $evidence): array
    {
        $sanitized = [];

        $allowed_fields = [
            'product_description',
            'customer_name',
            'customer_email',
            'billing_address',
            'customer_signature',
            'customer_communication',
            'service_date',
            'service_documentation',
            'duplicate_charge_id',
            'refund_policy',
            'cancellation_policy',
            'customer_purchase_ip',
            'shipping_address',
            'shipping_date',
            'shipping_carrier',
            'shipping_tracking_number'
        ];

        foreach ($allowed_fields as $field) {
            if (isset($evidence[$field])) {
                $sanitized[$field] = sanitize_textarea_field($evidence[$field]);
            }
        }

        return $sanitized;
    }

    /**
     * Export subscriptions
     */
    public function export_subscriptions(): void
    {
        if (!current_user_can($this->capability)) {
            wp_die(__('Permission denied', 'cobra-ai'));
        }

        global $wpdb;

        $subscriptions_table = $this->feature->get_table('stripe_subscriptions');

        $subscriptions = $wpdb->get_results(
            "SELECT * FROM {$subscriptions_table} ORDER BY created_at DESC"
        );

        $filename = 'subscriptions-export-' . date('Y-m-d') . '.csv';
        header('Content-Type: text/csv');
        header('Content-Disposition: attachment; filename="' . $filename . '"');

        $output = fopen('php://output', 'w');

        // Add headers
        fputcsv($output, [
            'Subscription ID',
            'Customer ID',
            'Plan ID',
            'Status',
            'Created At',
            'Period Start',
            'Period End',
            'Cancel At Period End'
        ]);

        // Add data
        foreach ($subscriptions as $sub) {
            fputcsv($output, [
                $sub->subscription_id,
                $sub->customer_id,
                $sub->plan_id,
                $sub->status,
                $sub->created_at,
                $sub->current_period_start,
                $sub->current_period_end,
                $sub->cancel_at_period_end
            ]);
        }

        fclose($output);
        exit;
    }
    /**
     * Get payment analytics
     */
    public function get_payment_analytics(array $args = []): array
    {
        global $wpdb;

        $defaults = [
            'start_date' => date('Y-m-d', strtotime('-30 days')),
            'end_date' => date('Y-m-d'),
            'subscription_id' => null
        ];

        $args = wp_parse_args($args, $defaults);
        $payments_table = $this->feature->get_table('stripe_payments');

        // Base query
        $where = "WHERE status = 'succeeded'";
        $params = [];

        // Date range
        if ($args['start_date'] && $args['end_date']) {
            $where .= " AND DATE(created_at) BETWEEN %s AND %s";
            $params[] = $args['start_date'];
            $params[] = $args['end_date'];
        }

        // Subscription filter
        if ($args['subscription_id']) {
            $where .= " AND subscription_id = %d";
            $params[] = $args['subscription_id'];
        }

        return [
            'total_revenue' => (float) $wpdb->get_var($wpdb->prepare(
                "SELECT SUM(amount) FROM {$payments_table['name']} {$where}",
                $params
            )),
            'successful_payments' => (int) $wpdb->get_var($wpdb->prepare(
                "SELECT COUNT(*) FROM {$payments_table['name']} {$where}",
                $params
            )),
            'daily_revenue' => $wpdb->get_results($wpdb->prepare(
                "SELECT DATE(created_at) as date, SUM(amount) as revenue
             FROM {$payments_table['name']} {$where}
             GROUP BY DATE(created_at)
             ORDER BY date DESC",
                $params
            ))
        ];
    }

    /**
     * Get items per page
     */
    private function get_items_per_page(string $option, int $default = 20): int
    {
        $per_page = (int) get_user_option($option);
        if (empty($per_page) || $per_page < 1) {
            $per_page = $default;
        }
        return $per_page;
    }

    /**
     * Get current page number
     */
    private function get_pagenum(): int
    {
        $pagenum = isset($_REQUEST['paged']) ? absint($_REQUEST['paged']) : 0;
        return max(1, $pagenum);
    }

    /**
     * Get subscription status counts
     */
    private function get_subscription_status_counts(): array
    {
        global $wpdb;
        $table = $this->feature->get_table('stripe_subscriptions');

        $results = $wpdb->get_results(
            "SELECT status, COUNT(*) as count 
         FROM {$table['name']}
         GROUP BY status"
        );

        $counts = [];
        foreach ($results as $row) {
            $counts[$row->status] = (int) $row->count;
        }

        return $counts;
    }

    /**
     * Get subscriptions with pagination
     */
    /**
     * Get subscriptions with pagination
     */
    private function get_subscriptions(array $args = []): array
    {
        global $wpdb;

        $defaults = [
            'per_page' => 20,
            'page' => 1,
            'status' => '',
            'search' => '',
            'orderby' => 'created_at',
            'order' => 'DESC'
        ];

        $args = wp_parse_args($args, $defaults);
        $table = $this->feature->get_table('stripe_subscriptions');

        // Build query
        $where = [];
        $params = [];

        if (!empty($args['status'])) {
            $where[] = "status = %s";
            $params[] = $args['status'];
        }

        if (!empty($args['search'])) {
            $where[] = "(subscription_id LIKE %s OR customer_id LIKE %s)";
            $search = '%' . $wpdb->esc_like($args['search']) . '%';
            $params[] = $search;
            $params[] = $search;
        }

        // Build WHERE clause
        $where_clause = !empty($where) ? 'WHERE ' . implode(' AND ', $where) : '';

        // Calculate offset
        $offset = ($args['page'] - 1) * $args['per_page'];

        // Get total items for pagination
        if (empty($params)) {
            $this->total_items = (int) $wpdb->get_var(
                "SELECT COUNT(*) FROM {$table['name']}"
            );
        } else {
            $this->total_items = (int) $wpdb->get_var($wpdb->prepare(
                "SELECT COUNT(*) FROM {$table['name']} $where_clause",
                $params
            ));
        }

        // Get paginated results
        if (empty($params)) {
            $query = $wpdb->prepare(
                "SELECT * FROM {$table['name']} 
             ORDER BY %s %s 
             LIMIT %d OFFSET %d",
                $args['orderby'],
                $args['order'],
                $args['per_page'],
                $offset
            );
        } else {
            $query = $wpdb->prepare(
                "SELECT * FROM {$table['name']} $where_clause 
             ORDER BY %s %s 
             LIMIT %d OFFSET %d",
                array_merge(
                    $params,
                    [
                        $args['orderby'],
                        $args['order'],
                        $args['per_page'],
                        $offset
                    ]
                )
            );
        }

        return $wpdb->get_results($query);
    }

    /**
     * Format currency amount
     */
    private function format_currency(float $amount, string $currency = 'USD'): string
    {
        return number_format($amount, 2) . ' ' . strtoupper($currency);
    }

    /**
     * Get pagination arguments
     */
    private function get_pagination_args(): array
    {
        $per_page = $this->get_items_per_page('subscriptions_per_page', 20);
        $total_pages = ceil($this->total_items / $per_page);

        return [
            'total_items' => $this->total_items,
            'per_page' => $per_page,
            'total_pages' => $total_pages
        ];
    }

    /**
     * Display pagination links
     */
    private function pagination_links(): void
    {
        $pagination_args = $this->get_pagination_args();

        echo paginate_links([
            'base' => add_query_arg('paged', '%#%'),
            'format' => '',
            'prev_text' => __('&laquo;'),
            'next_text' => __('&raquo;'),
            'total' => $pagination_args['total_pages'],
            'current' => $this->get_pagenum()
        ]);
    }
    /**
     * Get customer subscriptions
     */
    public function get_customer_subscriptions(string $customer_id): array
    {
        global $wpdb;
        $table = $this->feature->get_table('stripe_subscriptions');

        return $wpdb->get_results($wpdb->prepare(
            "SELECT * FROM {$table['name']} 
         WHERE customer_id = %s 
         ORDER BY created_at DESC",
            $customer_id
        ));
    }

    /**
     * Get customer payments
     */
    public function get_customer_payments(string $customer_id): array
    {
        global $wpdb;
        $payments_table = $this->feature->get_table('stripe_payments');
        $subscriptions_table = $this->feature->get_table('stripe_subscriptions');

        return $wpdb->get_results($wpdb->prepare(
            "SELECT p.* 
         FROM {$payments_table['name']} p
         JOIN {$subscriptions_table['name']} s ON s.id = p.subscription_id
         WHERE s.customer_id = %s 
         ORDER BY p.created_at DESC",
            $customer_id
        ));
    }

    /**
     * Get single payment
     */
    public function get_payment(int $payment_id)
    {
        global $wpdb;
        $table = $this->feature->get_table('stripe_payments');

        return $wpdb->get_row($wpdb->prepare(
            "SELECT * FROM {$table['name']} WHERE id = %d",
            $payment_id
        ));
    }

    /**
     * Get payment by Stripe payment ID
     */
    public function get_payment_by_stripe_id(string $payment_id)
    {
        global $wpdb;
        $table = $this->feature->get_table('stripe_payments');

        return $wpdb->get_row($wpdb->prepare(
            "SELECT * FROM {$table['name']} WHERE payment_id = %s",
            $payment_id
        ));
    }

    /**
     * Get payment details with subscription info
     */
    public function get_payment_details(int $payment_id): array
    {
        global $wpdb;
        $payments_table = $this->feature->get_table('stripe_payments');
        $subscriptions_table = $this->feature->get_table('stripe_subscriptions');

        $query = $wpdb->prepare(
            "SELECT p.*, s.customer_id, s.user_id, s.subscription_id as stripe_subscription_id 
         FROM {$payments_table['name']} p
         LEFT JOIN {$subscriptions_table['name']} s ON s.id = p.subscription_id
         WHERE p.id = %d",
            $payment_id
        );

        $payment = $wpdb->get_row($query);
        if (!$payment) {
            return [];
        }

        // Get user data if exists
        $user = get_user_by('id', $payment->user_id ?? 0);

        return [
            'payment' => $payment,
            'user' => $user ?: null,
            'subscription' => $payment->subscription_id ? $this->get_subscription($payment->subscription_id) : null
        ];
    }



    /**
     * Get subscription by Stripe subscription ID
     */
    public function get_subscription_by_stripe_id(string $subscription_id)
    {
        global $wpdb;
        $table = $this->feature->get_table('stripe_subscriptions');

        return $wpdb->get_row($wpdb->prepare(
            "SELECT * FROM {$table['name']} WHERE subscription_id = %s",
            $subscription_id
        ));
    }

    /**
     * Get subscription details with related data
     */
    public function get_subscription_details(int $subscription_id): array
    {
        global $wpdb;

        // Get subscription
        $subscription = $this->get_subscription($subscription_id);
        if (!$subscription) {
            return [];
        }

        // Get user
        $user = get_user_by('id', $subscription->user_id);

        // Get plan
        $plan = $this->feature->get_plans()->get_plan($subscription->plan_id);

        // Get payments
        $payments = $this->get_subscription_payments($subscription_id);

        return [
            'subscription' => $subscription,
            'user' => $user ?: null,
            'plan' => $plan,
            'payments' => $payments
        ];
    }
    /**
     * Get subscription by ID
     */
    public function get_subscription_by_id(string $subscription_id): ?object
    {
        global $wpdb;

        // Get table name
        $table = $this->feature->get_table('stripe_subscriptions');

        // Get subscription
        $subscription = $wpdb->get_row($wpdb->prepare(
            "SELECT s.*, p.amount, p.currency, p.billing_interval, p.name as plan_name 
         FROM {$table['name']} s 
         LEFT JOIN {$this->feature->get_table('stripe_plans')['name']} p ON s.plan_id = p.id 
         WHERE s.subscription_id = %s",
            $subscription_id
        ));

        return $subscription ?: null;
    }
}
