<?php

namespace CobraAI\Features\StripeSubscriptions;

use Stripe\Product;
use Stripe\Price;
use Stripe\Exception\ApiErrorException;

class StripeSubscriptionPlans
{
    private $feature;

    public function __construct(Feature $feature)
    {
        $this->feature = $feature;
    }

    /**
     * Create a new plan
     */
    // In StripeSubscriptionPlans.php, modify create_plan:
    public function create_plan(array $data): array
    {
        try {
            $this->validate_plan_data($data);

            // Check if plan exists in Stripe
            $existing_plan = $this->get_plan_by_stripe_id($data['plan_id'] ?? '');

            if ($existing_plan) {
                return $this->update_plan($existing_plan->id, $data);
            }

            // Create product & price in Stripe
            $stripe_data = $this->feature->get_api()->create_price($data);

            // Add image handling
            if (!empty($data['image_id'])) {
                $image_url = wp_get_attachment_url($data['image_id']);
                Product::update($stripe_data['product']->id, [
                    'images' => [$image_url]
                ]);
            }

            // Store in WP
            $post_id = wp_insert_post([
                'post_title' => $data['name'],
                'post_content' => $data['description'] ?? '',
                'post_type' => 'stripe_plan',
                'post_status' => 'publish',
                'meta_input' => [
                    '_stripe_plan_data' => array_merge($data, [
                        'stripe_product_id' => $stripe_data['product']->id,
                        'stripe_price_id' => $stripe_data['price']->id
                    ])
                ]
            ]);

            return [
                'success' => true,
                'plan_id' => $post_id,
                'stripe_data' => $stripe_data
            ];
        } catch (\Exception $e) {
            throw $e;
        }
    }

    /**
     * Update existing plan
     */
    public function update_plan(int $plan_id, array $data): array
    {
        try {
            $plan = $this->get_plan($plan_id);
            if (!$plan) {
                throw new \Exception('Plan not found');
            }

            // Update product in Stripe
            $product = Product::update($plan->product_id, [
                'name' => $data['name'],
                'description' => $data['description'] ?? '',
                'metadata' => [
                    'plan_id' => $plan_id,
                    'features' => json_encode($data['features'] ?? [])
                ]
            ]);

            // Create new price if needed
            $price = null;
            if (
                $data['amount'] != $plan->amount ||
                $data['currency'] != $plan->currency ||
                $data['interval'] != $plan->interval ||
                ($data['interval_count'] ?? 1) != $plan->interval_count
            ) {
                $price = Price::create([
                    'product' => $product->id,
                    'unit_amount' => $data['amount'] * 100,
                    'currency' => $data['currency'],
                    'recurring' => [
                        'interval' => $data['interval'],
                        'interval_count' => $data['interval_count'] ?? 1
                    ]
                ]);

                // Archive old price
                Price::update($plan->plan_id, [
                    'active' => false
                ]);
            }

            // Update database
            $this->update_stored_plan($plan_id, [
                'plan_id' => $price ? $price->id : $plan->plan_id,
                'name' => $data['name'],
                'description' => $data['description'] ?? '',
                'amount' => $data['amount'],
                'currency' => $data['currency'],
                'interval' => $data['interval'],
                'interval_count' => $data['interval_count'] ?? 1
            ]);

            return [
                'success' => true,
                'plan_id' => $plan_id,
                'stripe_product' => $product,
                'stripe_price' => $price
            ];
        } catch (\Exception $e) {
            $this->log_error('Failed to update plan', [
                'error' => $e->getMessage(),
                'plan_id' => $plan_id,
                'data' => $data
            ]);

            throw $e;
        }
    }

    /**
     * Archive/delete plan
     */
    public function archive_plan(int $plan_id): bool
    {
        try {
            $plan = $this->get_plan($plan_id);
            if (!$plan) {
                throw new \Exception('Plan not found');
            }

            // Archive price in Stripe
            Price::update($plan->plan_id, [
                'active' => false
            ]);

            // Update database status
            return $this->update_plan_status($plan_id, 'archived');
        } catch (\Exception $e) {
            $this->log_error('Failed to archive plan', [
                'error' => $e->getMessage(),
                'plan_id' => $plan_id
            ]);

            throw $e;
        }
    }

    /**
     * Get all plans
     */
    public function get_plans(array $args = []): array
    {
        global $wpdb;

        $defaults = [
            'status' => 'active',
            'orderby' => 'created_at',
            'order' => 'DESC'
        ];

        $args = wp_parse_args($args, $defaults);
        $table = $this->feature->get_table('stripe_plans');

        $query = "SELECT * FROM {$table['name']}";
        $where = [];
        $params = [];

        if ($args['status']) {
            $where[] = 'status = %s';
            $params[] = $args['status'];
        }

        if (!empty($where)) {
            $query .= ' WHERE ' . implode(' AND ', $where);
        }

        $query .= " ORDER BY {$args['orderby']} {$args['order']}";

        return $wpdb->get_results(
            $wpdb->prepare($query, $params)
        );
    }

    /**
     * Get single plan
     */
    public function get_plan(int $plan_id)
    {
        global $wpdb;

        $table = $this->feature->get_table('stripe_plans');

        return $wpdb->get_row($wpdb->prepare(
            "SELECT * FROM {$table['name']} WHERE id = %d",
            $plan_id
        ));
    }

    /**
     * Sync plans with Stripe
     * TODO: Remove this method
     */
    public function sync_with_stripe_old(): array
    {
        // try {
        // Get all Stripe prices
        $prices = Price::all([
            'active' => true,
            'type' => 'recurring',
            'expand' => ['data.product']
        ]);

        $synced = [];
        foreach ($prices->data as $price) {
            // Skip if product is deleted
            if ($price->product->deleted) {
                continue;
            }

            // Try to find existing plan
            $plan = $this->get_plan_by_stripe_id($price->id);
            $plan_data = [
                'plan_id' => $price->id,
                'product_id' => $price->product->id,
                'name' => $price->product->name,
                'description' => $price->product->description,
                'amount' => $price->unit_amount / 100,
                'currency' => $price->currency,
                'billing_interval' => $price->recurring->interval, // Changed from interval
                'interval_count' => $price->recurring->interval_count,
                'status' => 'active'
            ];

            if ($plan) {
                $this->update_stored_plan($plan->id, $plan_data);
            } else {
                $this->store_plan($plan_data);
            }

            $synced[] = $price->id;
        }

        // Archive plans not in Stripe
        // $this->archive_missing_plans($synced);

        return $synced;
        // } catch (\Exception $e) {
        //     $this->log_error('Failed to sync plans', [
        //         'error' => $e->getMessage()
        //     ]);

        //     throw $e;
        // }
    }
    /**
     * Handle AJAX sync_with_stripe wit type of plan
     */
    public function sync_with_stripe(): array
    {
        try {
            $prices = Price::all([
                'active' => true,
                'type' => 'recurring',
                'expand' => ['data.product']
            ]);

            $synced = [];
            foreach ($prices->data as $price) {
                if ($price->product->deleted) continue;

                // Find existing plan by Stripe ID
                $existing_plans = get_posts([
                    'post_type' => 'stripe_plan',
                    'meta_key' => '_stripe_price_id',
                    'meta_value' => $price->id,
                    'posts_per_page' => 1
                ]);

                $plan_data = [
                    'post_title' => $price->product->name,
                    'post_content' => $price->product->description,
                    'post_status' => 'publish',
                    'post_type' => 'stripe_plan',
                    'meta_input' => [
                        '_stripe_price_id' => $price->id,
                        '_stripe_product_id' => $price->product->id,
                        '_price_amount' => $price->unit_amount / 100,
                        '_price_currency' => $price->currency,
                        '_billing_interval' => $price->recurring->interval,
                        '_interval_count' => $price->recurring->interval_count
                    ]
                ];

                if (!empty($existing_plans)) {
                    $plan_data['ID'] = $existing_plans[0]->ID;
                    wp_update_post($plan_data);
                } else {
                    wp_insert_post($plan_data);
                }

                $synced[] = $price->id;
            }

            return $synced;
        } catch (\Exception $e) {
            $this->log_error('Failed to sync plans', ['error' => $e->getMessage()]);
            throw $e;
        }
    }
    /**
     * Store plan in database
     */
    private function store_plan(array $data): int
    {
        //     global $wpdb;
        //     print_r($data);

        //     $table = $this->feature->get_table('stripe_plans');

        //     $wpdb->insert(
        //         $table['name'],
        //         [
        //             'plan_id' => $data['plan_id'],
        //             'product_id' => $data['product_id'],
        //             'name' => $data['name'],
        //             'description' => $data['description'] ?? '',
        //             'amount' => $data['amount'],
        //             'currency' => $data['currency'],
        //             'billing_interval' => $data['interval'] ?? $data['billing_interval'],
        //             'interval_count' => $data['interval_count'],
        //             'status' => 'active'
        //         ],
        //         ['%s', '%s', '%s', '%s', '%f', '%s', '%s', '%d', '%s']
        //     );

        //    if ($wpdb->insert_id) {
        //         return $wpdb->insert_id;
        //     }

        //     throw new \Exception('Failed to store plan');
        $existing_plans = get_posts([
            'post_type' => 'stripe_plan',
            'meta_key' => '_stripe_price_id',
            'meta_value' => $data['plan_id'],
            'posts_per_page' => 1
        ]);

        $plan_data = [
            'post_title' => $data['name'],
            'post_content' => $data['description'] ?? '',
            'post_status' => 'publish',
            'post_type' => 'stripe_plan',
            'meta_input' => [
                '_stripe_price_id' => $data['plan_id'],
                '_stripe_product_id' =>  $data['product_id'],
                '_price_amount' => $data['amount'] / 100,
                '_price_currency' => $data['currency'],
                '_billing_interval' => $data['interval_count'],
                '_interval_count' => $data['interval_count']
            ]
        ];

        if (!empty($existing_plans)) {
            $plan_data['ID'] = $existing_plans[0]->ID;
            wp_update_post($plan_data);
            return $existing_plans[0]->ID;
        } else {
            return wp_insert_post($plan_data);
        }
    }

    /**
     * Update stored plan
     */
    private function update_stored_plan(int $plan_id, array $data): bool
    {
        global $wpdb;

        $table = $this->feature->get_table('stripe_plans');

        return $wpdb->update(
            $table['name'],
            $data,
            ['id' => $plan_id]
        ) !== false;
    }

    /**
     * Update plan status
     */
    private function update_plan_status(int $plan_id, string $status): bool
    {
        global $wpdb;

        $table = $this->feature->get_table('stripe_plans');

        return $wpdb->update(
            $table['name'],
            ['status' => $status],
            ['id' => $plan_id],
            ['%s'],
            ['%d']
        ) !== false;
    }

    /**
     * Get plan by Stripe ID
     */
    private function get_plan_by_stripe_id(string $stripe_id)
    {
    
        $plan = get_posts([
            'post_type' => 'stripe_plan',
            'meta_key' => '_stripe_price_id',
            'meta_value' => $stripe_id,
            'posts_per_page' => 1
        ]);

        return $plan ? $plan[0] : null;
       
    }

    /**
     * Archive plans not in Stripe
     */
    private function archive_missing_plans(array $active_stripe_ids): void
    {
        global $wpdb;

        $table = $this->feature->get_table('stripe_plans');
        $ids_string = "'" . implode("','", array_map('esc_sql', $active_stripe_ids)) . "'";

        $wpdb->query(
            "UPDATE {$table['name']} 
             SET status = 'archived' 
             WHERE plan_id NOT IN ({$ids_string}) 
             AND status = 'active'"
        );
    }

    /**
     * Get plan subscribers
     */
    public function get_plan_subscribers(int $plan_id, array $args = []): array
    {
        global $wpdb;

        $defaults = [
            'status' => 'active',
            'orderby' => 'created_at',
            'order' => 'DESC',
            'limit' => 20,
            'offset' => 0
        ];

        $args = wp_parse_args($args, $defaults);

        $subscriptions_table = $this->feature->get_table('stripe_subscriptions');

        $query = "SELECT * FROM {$subscriptions_table['name']} WHERE plan_id = %d";
        $params = [$plan_id];

        if ($args['status']) {
            $query .= " AND status = %s";
            $params[] = $args['status'];
        }

        $query .= " ORDER BY {$args['orderby']} {$args['order']}";
        $query .= " LIMIT %d OFFSET %d";
        $params[] = $args['limit'];
        $params[] = $args['offset'];

        return $wpdb->get_results(
            $wpdb->prepare($query, $params)
        );
    }

    /**
     * Get subscriber count
     */
    public function get_subscriber_count(int $plan_id, string $status = 'active'): int
    {
        global $wpdb;

        $table = $this->feature->get_table('stripe_subscriptions');

        return (int) $wpdb->get_var($wpdb->prepare(
            "SELECT COUNT(*) FROM {$table['name']} 
             WHERE plan_id = %d AND status = %s",
            $plan_id,
            $status
        ));
    }

    /**
     * Validate plan data
     */
    private function validate_plan_data(array $data): void
    {
        $required = ['name', 'amount', 'currency', 'interval'];

        foreach ($required as $field) {
            if (empty($data[$field])) {
                throw new \Exception("Missing required field: {$field}");
            }
        }

        // Validate amount
        if (!is_numeric($data['amount']) || $data['amount'] <= 0) {
            throw new \Exception('Invalid amount');
        }

        // Validate currency
        if (!preg_match('/^[A-Z]{3}$/', $data['currency'])) {
            throw new \Exception('Invalid currency code');
        }

        // Validate interval
        if (!in_array($data['interval'], ['day', 'week', 'month', 'year'])) {
            throw new \Exception('Invalid interval');
        }

        // Validate interval count
        if (isset($data['interval_count'])) {
            if (!is_numeric($data['interval_count']) || $data['interval_count'] < 1) {
                throw new \Exception('Invalid interval count');
            }
        }
    }
    public function sync_stripe_plans(): void
    {
        try {
            $stripe_plans = \Stripe\Price::all([
                'active' => true,
                'type' => 'recurring',
                'expand' => ['data.product']
            ]);

            foreach ($stripe_plans->data as $stripe_plan) {
                $local_plan = $this->get_plan_by_stripe_id($stripe_plan->id);

                $plan_data = [
                    'name' => $stripe_plan->product->name,
                    'description' => $stripe_plan->product->description,
                    'amount' => $stripe_plan->unit_amount / 100,
                    'currency' => $stripe_plan->currency,
                    'interval' => $stripe_plan->recurring->interval,
                    'stripe_id' => $stripe_plan->id,
                    'product_id' => $stripe_plan->product->id
                ];

                if ($local_plan) {
                    $this->update_plan($local_plan->ID, $plan_data);
                } else {
                    $this->create_plan($plan_data);
                }
            }
        } catch (\Exception $e) {
            $this->feature->log('error', 'Plan sync failed: ' . $e->getMessage());
        }
    }
    /**
     * Log error
     */
    private function log_error(string $message, array $context = []): void
    {
        $this->feature->log('error', $message, $context);
    }
}
